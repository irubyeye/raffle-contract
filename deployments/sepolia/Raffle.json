{
  "address": "0x066e26D493935A0612D7a3632998a385627Be447",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract VRFv2Consumer",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniSwapRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RANDOM_MAX_RANGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptingOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalBalance",
          "type": "uint256"
        }
      ],
      "name": "calculateRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "currencyOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endRaffle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_raffleId",
          "type": "uint256"
        }
      ],
      "name": "getBalanceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getCurrencyExt",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_raffleId",
          "type": "uint256"
        }
      ],
      "name": "getRafflePlayers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "playerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "playerBet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prevDepSum",
              "type": "uint256"
            }
          ],
          "internalType": "struct Raffle.Player[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getTokenOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPlayed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isPotTransfered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isRaffleInProcess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "manageAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dataFeed",
          "type": "address"
        }
      ],
      "name": "manageCurrencyOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dataFeed",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isAllowed",
          "type": "bool"
        }
      ],
      "name": "manageTokenAndOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isAllowed",
          "type": "bool"
        }
      ],
      "name": "manageTokensList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniSwapRouter",
          "type": "address"
        }
      ],
      "name": "manageUniswap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VRFv2Consumer",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "manageVrfRandom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wethToken",
          "type": "address"
        }
      ],
      "name": "manageWeth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_num1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_num2",
          "type": "uint256"
        }
      ],
      "name": "percCalc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "playRaffle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "raffleId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rafflePlayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "playerBet",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevDepSum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rafflePot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rafflePotInWeth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "raffleWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIdForRaffle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userPosInRaffle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_raffleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_supposedWinner",
          "type": "address"
        }
      ],
      "name": "verifyAndTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_raffleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_supposedWinner",
          "type": "address"
        }
      ],
      "name": "verifyWinner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d851b73fc9cf2110b630403394c5a3c3c3ef21ec56c4f3559ae61cf0050a1be",
  "receipt": {
    "to": null,
    "from": "0x574983Be59ba0056A6A28BBBac930051678734B3",
    "contractAddress": "0x066e26D493935A0612D7a3632998a385627Be447",
    "transactionIndex": 56,
    "gasUsed": "2530943",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000080000000000400000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000110000080000000000000000000000000000000000000",
    "blockHash": "0x7043155d823764135e80f93aaa47aae066aaccb1397bb2fef2064f09ce59e2be",
    "transactionHash": "0x9d851b73fc9cf2110b630403394c5a3c3c3ef21ec56c4f3559ae61cf0050a1be",
    "logs": [
      {
        "transactionIndex": 56,
        "blockNumber": 5214135,
        "transactionHash": "0x9d851b73fc9cf2110b630403394c5a3c3c3ef21ec56c4f3559ae61cf0050a1be",
        "address": "0x066e26D493935A0612D7a3632998a385627Be447",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000574983be59ba0056a6a28bbbac930051678734b3"
        ],
        "data": "0x",
        "logIndex": 49,
        "blockHash": "0x7043155d823764135e80f93aaa47aae066aaccb1397bb2fef2064f09ce59e2be"
      }
    ],
    "blockNumber": 5214135,
    "cumulativeGasUsed": "5808947",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8b56001485d5d47A97f1B7b53b3B3734bA3b2FBD",
    "0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9",
    "0xC532a74256D3Db42D0Bf7a0400fEFDbad7694008"
  ],
  "numDeployments": 3,
  "solcInputHash": "edc12d54f92d6a761cc6f15ac7bb46d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract VRFv2Consumer\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniSwapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RANDOM_MAX_RANGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptingOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalBalance\",\"type\":\"uint256\"}],\"name\":\"calculateRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currencyOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"getBalanceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getCurrencyExt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"getRafflePlayers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"playerBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevDepSum\",\"type\":\"uint256\"}],\"internalType\":\"struct Raffle.Player[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPotTransfered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isRaffleInProcess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"manageAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dataFeed\",\"type\":\"address\"}],\"name\":\"manageCurrencyOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dataFeed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAllowed\",\"type\":\"bool\"}],\"name\":\"manageTokenAndOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAllowed\",\"type\":\"bool\"}],\"name\":\"manageTokensList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniSwapRouter\",\"type\":\"address\"}],\"name\":\"manageUniswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VRFv2Consumer\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"manageVrfRandom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"}],\"name\":\"manageWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_num2\",\"type\":\"uint256\"}],\"name\":\"percCalc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"playRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raffleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rafflePlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"playerBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevDepSum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rafflePot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rafflePotInWeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffleWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdForRaffle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPosInRaffle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_supposedWinner\",\"type\":\"address\"}],\"name\":\"verifyAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_supposedWinner\",\"type\":\"address\"}],\"name\":\"verifyWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x215529a99534a40e6257ef2282a91ea4a95b66debc3997866406907622efb405\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"../node_modules/@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../node_modules/@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"../node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../node_modules/@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\"./RandomNumberConsumerV2.sol\\\";\\n\\ncontract Raffle is Ownable {\\n    mapping(address => bool) public allowedTokens;\\n\\n    mapping(address => address) public currencyOracle;\\n\\n    mapping(uint256 => uint256) public rafflePot;\\n\\n    mapping(uint256 => uint256) public rafflePotInWeth;\\n\\n    mapping(uint256 => bool) public isRaffleInProcess;\\n\\n    mapping(uint256 => Player[]) public rafflePlayers;\\n\\n    mapping(address => uint256) public isPlayed;\\n\\n    mapping(uint256 => uint256) public requestIdForRaffle;\\n\\n    mapping(uint256 => address) public raffleWinner;\\n\\n    mapping(uint256 => bool) public isPotTransfered;\\n\\n    mapping(address => bool) public isAdmin;\\n\\n    mapping(address => mapping(uint256 => uint256)) public userPosInRaffle;\\n\\n    uint256 public raffleId;\\n\\n    uint256 public constant DECIMALS = 18;\\n\\n    uint256 public constant RANDOM_MAX_RANGE = 999999999999999999;\\n\\n    address public _weth;\\n\\n    address public uniswapRouterAddress;\\n\\n    VRFv2Consumer randomNumberConsumer;\\n\\n    IUniswapV2Router02 public _router;\\n\\n    struct Player {\\n        address playerAddress;\\n        uint256 playerBet;\\n        uint256 prevDepSum;\\n    }\\n\\n    constructor(\\n        VRFv2Consumer _consumer,\\n        address _wethAddress,\\n        address _uniSwapRouter\\n    ) Ownable() {\\n        randomNumberConsumer = _consumer;\\n        _weth = _wethAddress;\\n        _router = IUniswapV2Router02(_uniSwapRouter);\\n        uniswapRouterAddress = _uniSwapRouter;\\n        isAdmin[msg.sender] = true;\\n        isPotTransfered[raffleId] = true;\\n    }\\n\\n    modifier onlyAllowedTokens(address _token) {\\n        require(allowedTokens[_token], \\\"Token is not supported!\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin[msg.sender], \\\"Only admin can perform this!\\\");\\n        _;\\n    }\\n\\n    function manageAdmins(address _user, bool _status) external onlyAdmin {\\n        isAdmin[_user] = _status;\\n    }\\n\\n    function manageVrfRandom(VRFv2Consumer _consumer) external onlyAdmin {\\n        randomNumberConsumer = _consumer;\\n    }\\n\\n    function manageUniswap(address _uniSwapRouter) external onlyAdmin {\\n        _router = IUniswapV2Router02(_uniSwapRouter);\\n        uniswapRouterAddress = _uniSwapRouter;\\n    }\\n\\n    function manageWeth(address _wethToken) external onlyAdmin {\\n        _weth = _wethToken;\\n    }\\n\\n    function manageTokensList(\\n        address _token,\\n        bool _isAllowed\\n    ) external onlyAdmin {\\n        allowedTokens[_token] = _isAllowed;\\n    }\\n\\n    function manageCurrencyOracle(\\n        address _token,\\n        address _dataFeed\\n    ) external onlyAdmin {\\n        currencyOracle[_token] = _dataFeed;\\n    }\\n\\n    function manageTokenAndOracle(\\n        address _token,\\n        address _dataFeed,\\n        bool _isAllowed\\n    ) external onlyOwner {\\n        allowedTokens[_token] = _isAllowed;\\n        currencyOracle[_token] = _dataFeed;\\n    }\\n\\n    function getCurrency(\\n        address _token\\n    ) internal view onlyAllowedTokens(_token) returns (int) {\\n        AggregatorV3Interface localDataFeed = AggregatorV3Interface(\\n            currencyOracle[_token]\\n        );\\n\\n        (, int answer, , , ) = localDataFeed.latestRoundData();\\n        return answer;\\n    }\\n\\n    function getCurrencyExt(address _token) public view returns (int) {\\n        return getCurrency(_token);\\n    }\\n\\n    function getRafflePlayers(\\n        uint256 _raffleId\\n    ) external view returns (Player[] memory) {\\n        return rafflePlayers[_raffleId];\\n    }\\n\\n    function getBalanceInUsd(\\n        address _player,\\n        uint256 _raffleId\\n    ) public view returns (uint256) {\\n        return\\n            rafflePlayers[_raffleId][userPosInRaffle[_player][raffleId]]\\n                .playerBet;\\n    }\\n\\n    function getTokenOracle(address _token) external view returns (address) {\\n        return currencyOracle[_token];\\n    }\\n\\n    function requestRandomNumber() internal onlyAdmin {\\n        requestIdForRaffle[raffleId] = randomNumberConsumer\\n            .requestRandomWords();\\n    }\\n\\n    function deposite(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _raffleId\\n    ) internal onlyAllowedTokens(_token) {\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n\\n        require(\\n            IERC20(_token).balanceOf(address(this)) >= _amount && _amount > 0,\\n            \\\"Not enough balance!\\\"\\n        );\\n\\n        int256 currency = getCurrency(_token);\\n\\n        uint256 usdAmount = uint256(currency) * _amount;\\n\\n        address[] memory path = new address[](2);\\n        path[0] = _token;\\n        path[1] = _weth;\\n\\n        IERC20(_token).approve(uniswapRouterAddress, _amount);\\n\\n        uint256[] memory amountsOut = _router.getAmountsOut(_amount, path);\\n\\n        uint256 amountInWeth = _router.swapExactTokensForTokens(\\n            _amount,\\n            amountsOut[amountsOut.length - 1],\\n            path,\\n            address(this),\\n            block.timestamp + 600\\n        )[amountsOut.length - 1];\\n\\n        Player memory rafflePlayer;\\n        rafflePlayer.playerAddress = msg.sender;\\n        rafflePlayer.playerBet = usdAmount;\\n        rafflePlayer.prevDepSum = rafflePot[_raffleId];\\n\\n        userPosInRaffle[msg.sender][_raffleId] = rafflePlayers[_raffleId]\\n            .length;\\n\\n        rafflePlayers[_raffleId].push(rafflePlayer);\\n\\n        rafflePot[_raffleId] += usdAmount;\\n\\n        rafflePotInWeth[_raffleId] += amountInWeth;\\n    }\\n\\n    function getLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amount\\n    ) public view returns (uint256[] memory) {\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenA;\\n        path[1] = _tokenB;\\n\\n        return _router.getAmountsOut(_amount, path);\\n    }\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external {\\n        require(\\n            IERC20(tokenA).allowance(msg.sender, address(this)) >=\\n                amountADesired &&\\n                IERC20(tokenB).allowance(msg.sender, address(this)) >=\\n                amountBDesired,\\n            \\\"Approval failed\\\"\\n        );\\n\\n        IERC20(tokenA).transferFrom(msg.sender, address(this), amountADesired);\\n        IERC20(tokenB).transferFrom(msg.sender, address(this), amountBDesired);\\n\\n        IERC20(tokenA).approve(uniswapRouterAddress, amountADesired);\\n        IERC20(tokenB).approve(uniswapRouterAddress, amountBDesired);\\n\\n        _router.addLiquidity(\\n            tokenA,\\n            tokenB,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    function playRaffle(address _token, uint256 _amount) external {\\n        if (!isRaffleInProcess[raffleId]) {\\n            require(\\n                isPotTransfered[raffleId],\\n                \\\"Cannot start new raffle before previous winner hasn't received pot!\\\"\\n            );\\n\\n            raffleId++;\\n            isRaffleInProcess[raffleId] = true;\\n        }\\n\\n        require(isRaffleInProcess[raffleId], \\\"This round has ended!\\\");\\n\\n        require(\\n            isPlayed[msg.sender] != raffleId,\\n            \\\"You have already joined this round!\\\"\\n        );\\n\\n        deposite(_token, _amount, raffleId);\\n\\n        isPlayed[msg.sender] = raffleId;\\n    }\\n\\n    function endRaffle() external onlyAdmin {\\n        require(isRaffleInProcess[raffleId], \\\"This raffle is ended!\\\");\\n        requestIdForRaffle[raffleId] = randomNumberConsumer\\n            .requestRandomWords();\\n        isRaffleInProcess[raffleId] = false;\\n    }\\n\\n    function acceptingOwnership() external onlyAdmin{\\n        randomNumberConsumer.acceptOwnership();\\n    }\\n\\n    function verifyAndTransfer(\\n        uint256 _raffleId,\\n        address _supposedWinner\\n    ) external onlyAdmin {\\n        require(isPotTransfered[raffleId] == false, \\\"Already transfered pot!\\\");\\n\\n        require(verifyWinner(_raffleId, _supposedWinner), \\\"Wrong player!\\\");\\n\\n        isPotTransfered[_raffleId] = true;\\n\\n        IERC20(_weth).transfer(_supposedWinner, rafflePotInWeth[_raffleId]);\\n    }\\n\\n    function percCalc(\\n        uint256 _num1,\\n        uint256 _num2\\n    ) public pure returns (uint256) {\\n        uint256 movedDec = _num1 * 10 ** DECIMALS;\\n        return movedDec / _num2;\\n    }\\n\\n    function calculateRange(\\n        uint256 _deposit,\\n        uint256 _totalBalance\\n    ) public view returns (uint256) {\\n        require(_totalBalance > 0, \\\"Total balance must be greater than zero\\\");\\n\\n        uint256 depositPerc = percCalc(_deposit, _totalBalance);\\n\\n        uint256 range = depositPerc * RANDOM_MAX_RANGE;\\n\\n        return range / (10 ** DECIMALS);\\n    }\\n\\n    function verifyWinner(\\n        uint256 _raffleId,\\n        address _supposedWinner\\n    ) public view returns (bool) {\\n        (bool isGenerated, uint256[] memory randNumber) = randomNumberConsumer\\n            .getRequestStatus(requestIdForRaffle[raffleId]);\\n\\n        require(isGenerated, \\\"Random number has not received yet!\\\");\\n\\n        uint256 supposedWinnerRafflePos = userPosInRaffle[_supposedWinner][\\n            _raffleId\\n        ];\\n\\n        Player memory supposedWinnerParams = rafflePlayers[_raffleId][\\n            supposedWinnerRafflePos\\n        ];\\n\\n        require(\\n            supposedWinnerParams.playerAddress == _supposedWinner,\\n            \\\"No such player in requested raffle!\\\"\\n        );\\n\\n        uint256 prevPlayersRange;\\n\\n        if (supposedWinnerRafflePos == 0) {\\n            prevPlayersRange = 0;\\n        } else {\\n            prevPlayersRange = calculateRange(\\n                supposedWinnerParams.prevDepSum,\\n                rafflePot[_raffleId]\\n            );\\n        }\\n\\n        uint256 currPlayerRange = calculateRange(\\n            supposedWinnerParams.playerBet,\\n            rafflePot[_raffleId]\\n        );\\n\\n        uint256 maxPlayerDiapason = prevPlayersRange + currPlayerRange;\\n\\n        uint256 checkedRaffleWinnerNumber = randNumber[0] % (10**DECIMALS);\\n\\n        return\\n            checkedRaffleWinnerNumber > prevPlayersRange &&\\n            checkedRaffleWinnerNumber <= maxPlayerDiapason;\\n    }\\n}\\n\",\"keccak256\":\"0xf55cf0ff6bfebeb1fe6006083e94af8e4d649adda03c90f6b808bdcadec724dd\",\"license\":\"MIT\"},\"contracts/RandomNumberConsumerV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\n\\ncontract VRFv2Consumer is VRFConsumerBaseV2, ConfirmedOwner {\\n    event RequestSent(uint256 requestId, uint32 numWords);\\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\\n\\n    struct RequestStatus {\\n        bool fulfilled;\\n        bool exists;\\n        uint256[] randomWords;\\n    }\\n    mapping(uint256 => RequestStatus) public s_requests;\\n    VRFCoordinatorV2Interface COORDINATOR;\\n\\n    uint64 s_subscriptionId;\\n\\n    uint256[] public requestIds;\\n    uint256 public lastRequestId;\\n\\n    bytes32 keyHash =\\n        0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c;\\n\\n    uint32 callbackGasLimit = 100000;\\n\\n    uint16 requestConfirmations = 3;\\n\\n    uint32 numWords = 2;\\n\\n    constructor(\\n        uint64 subscriptionId\\n    )\\n        VRFConsumerBaseV2(0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625)\\n        ConfirmedOwner(msg.sender)\\n    {\\n        COORDINATOR = VRFCoordinatorV2Interface(\\n            0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625\\n        );\\n        s_subscriptionId = subscriptionId;\\n    }\\n\\n    function requestRandomWords()\\n        external\\n        onlyOwner\\n        returns (uint256 requestId)\\n    {\\n        requestId = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            s_subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n        s_requests[requestId] = RequestStatus({\\n            randomWords: new uint256[](0),\\n            exists: true,\\n            fulfilled: false\\n        });\\n        requestIds.push(requestId);\\n        lastRequestId = requestId;\\n        emit RequestSent(requestId, numWords);\\n        return requestId;\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 _requestId,\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        s_requests[_requestId].fulfilled = true;\\n        s_requests[_requestId].randomWords = _randomWords;\\n        emit RequestFulfilled(_requestId, _randomWords);\\n    }\\n\\n    function getRequestStatus(\\n        uint256 _requestId\\n    ) external view returns (bool fulfilled, uint256[] memory randomWords) {\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        RequestStatus memory request = s_requests[_requestId];\\n        return (request.fulfilled, request.randomWords);\\n    }\\n}\\n\",\"keccak256\":\"0xcc289371337051de7d428633034d3e03bceebf0c7c167fa227242d5c9ba8fd48\",\"license\":\"MIT\"},\"node_modules/@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"node_modules/@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"node_modules/@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d35760003560e01c8063715018a611610186578063b375603c116100e3578063e744092e11610097578063ee095c0e11610071578063ee095c0e146106c6578063f2fde38b146106ce578063f82695a8146106e157600080fd5b8063e744092e1461067d578063e8e33700146106a0578063edae876f146106b357600080fd5b8063cf0d9640116100c8578063cf0d96401461062c578063e248a7e61461063f578063e5a0b2ef1461065257600080fd5b8063b375603c146105fa578063c48e84bc1461060357600080fd5b80637c8c0b921161013a5780639a421bc81161011f5780639a421bc8146105c1578063a1764595146105d4578063ae91fc30146105e757600080fd5b80637c8c0b92146105905780638da5cb5b146105b057600080fd5b8063789a12fd1161016b578063789a12fd1461053d5780637a9261651461055d5780637b9126661461057057600080fd5b8063715018a614610515578063728a4f621461051d57600080fd5b806333d027a01161023457806364c19175116101e85780636f3c796d116101cd5780636f3c796d146104bf57806370e424e3146104df578063714d60d41461050257600080fd5b806364c19175146104735780636b1cdd841461049c57600080fd5b80634b5a2aa5116102195780634b5a2aa51461043e5780634fe23e3b1461045157806354d36b321461046057600080fd5b806333d027a0146104165780634b50c6a61461041e57600080fd5b806320ca3c7f1161028b57806329b1438d1161027057806329b1438d146103da5780632e0f2625146103ed57806332573ea71461040357600080fd5b806320ca3c7f146103a457806324d7806c146103b757600080fd5b80630a5882d0116102bc5780630a5882d01461033857806318f5f2a81461034d578063196c52f81461039157600080fd5b80630974dd7f146102d857806309f87fcb14610315575b600080fd5b6102eb6102e6366004612272565b6106f4565b604080516001600160a01b0390941684526020840192909252908201526060015b60405180910390f35b6103286103233660046122a9565b610740565b604051901515815260200161030c565b61034b6103463660046122e7565b610a15565b005b61037961035b366004612332565b6001600160a01b039081166000908152600260205260409020541690565b6040516001600160a01b03909116815260200161030c565b61034b61039f366004612356565b610a63565b600f54610379906001600160a01b031681565b6103286103c5366004612332565b600b6020526000908152604090205460ff1681565b61034b6103e8366004612384565b610af0565b6103f5601281565b60405190815260200161030c565b6103f5610411366004612272565b610cf3565b61034b610dad565b6103f561042c366004612332565b60076020526000908152604090205481565b61034b61044c366004612332565b610e76565b6103f5670de0b6b3a763ffff81565b61034b61046e366004612332565b610ef7565b6103796104813660046123b0565b6009602052600090815260409020546001600160a01b031681565b6103286104aa3660046123b0565b600a6020526000908152604090205460ff1681565b6103f56104cd3660046123b0565b60036020526000908152604090205481565b6103286104ed3660046123b0565b60056020526000908152604090205460ff1681565b6103f5610510366004612272565b610f78565b61034b610fa5565b61053061052b3660046123c9565b610fb9565b60405161030c919061240a565b61055061054b3660046123b0565b6110aa565b60405161030c919061244e565b61034b61056b3660046124b0565b61113f565b6103f561057e3660046123b0565b60046020526000908152604090205481565b6103f561059e3660046123b0565b60086020526000908152604090205481565b6000546001600160a01b0316610379565b61034b6105cf3660046122a9565b6111c9565b600e54610379906001600160a01b031681565b61034b6105f53660046124b0565b6113ab565b6103f5600d5481565b610379610611366004612332565b6002602052600090815260409020546001600160a01b031681565b6103f561063a366004612332565b611435565b6103f561064d366004612384565b611440565b6103f5610660366004612384565b600c60209081526000928352604080842090915290825290205481565b61032861068b366004612332565b60016020526000908152604090205460ff1681565b61034b6106ae3660046124de565b611499565b601154610379906001600160a01b031681565b61034b61187b565b61034b6106dc366004612332565b6119e1565b61034b6106ef366004612332565b611a71565b6006602052816000526040600020818154811061071057600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b03909116935090915083565b601054600d546000908152600860205260408082205490517fd8a4676f00000000000000000000000000000000000000000000000000000000815260048101919091529091829182916001600160a01b03169063d8a4676f90602401600060405180830381865afa1580156107b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107e1919081019061260e565b915091508161085d5760405162461bcd60e51b815260206004820152602360248201527f52616e646f6d206e756d62657220686173206e6f74207265636569766564207960448201527f657421000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6001600160a01b0384166000908152600c602090815260408083208884528252808320546006909252822080549192918390811061089d5761089d61265f565b600091825260209182902060408051606081018252600390930290910180546001600160a01b039081168085526001830154958501959095526002909101549183019190915290925087161461095b5760405162461bcd60e51b815260206004820152602360248201527f4e6f207375636820706c6179657220696e20726571756573746564207261666660448201527f6c652100000000000000000000000000000000000000000000000000000000006064820152608401610854565b60008260000361096d57506000610991565b61098e8260400151600360008b815260200190815260200160002054610cf3565b90505b60208083015160008a8152600390925260408220546109b09190610cf3565b905060006109be828461268b565b905060006109ce6012600a612782565b876000815181106109e1576109e161265f565b60200260200101516109f391906127a4565b90508381118015610a045750818111155b985050505050505050505b92915050565b610a1d611afc565b6001600160a01b039283166000908152600160209081526040808320805460ff191694151594909417909355600290522080546001600160a01b03191691909216179055565b336000908152600b602052604090205460ff16610ac25760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792061646d696e2063616e20706572666f726d207468697321000000006044820152606401610854565b6001600160a01b03918216600090815260026020526040902080546001600160a01b03191691909216179055565b600d5460009081526005602052604090205460ff16610be857600d546000908152600a602052604090205460ff16610bb65760405162461bcd60e51b815260206004820152604360248201527f43616e6e6f74207374617274206e657720726166666c65206265666f7265207060448201527f726576696f75732077696e6e6572206861736e2774207265636569766564207060648201527f6f74210000000000000000000000000000000000000000000000000000000000608482015260a401610854565b600d8054906000610bc6836127b8565b9091555050600d546000908152600560205260409020805460ff191660011790555b600d5460009081526005602052604090205460ff16610c495760405162461bcd60e51b815260206004820152601560248201527f5468697320726f756e642068617320656e6465642100000000000000000000006044820152606401610854565b600d543360009081526007602052604090205403610ccf5760405162461bcd60e51b815260206004820152602360248201527f596f75206861766520616c7265616479206a6f696e6564207468697320726f7560448201527f6e642100000000000000000000000000000000000000000000000000000000006064820152608401610854565b610cdc8282600d54611b56565b5050600d5433600090815260076020526040902055565b6000808211610d6a5760405162461bcd60e51b815260206004820152602760248201527f546f74616c2062616c616e6365206d757374206265206772656174657220746860448201527f616e207a65726f000000000000000000000000000000000000000000000000006064820152608401610854565b6000610d768484610f78565b90506000610d8c670de0b6b3a763ffff836127d1565b9050610d9a6012600a612782565b610da490826127e8565b95945050505050565b336000908152600b602052604090205460ff16610e0c5760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792061646d696e2063616e20706572666f726d207468697321000000006044820152606401610854565b601060009054906101000a90046001600160a01b03166001600160a01b03166379ba50976040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e5c57600080fd5b505af1158015610e70573d6000803e3d6000fd5b50505050565b336000908152600b602052604090205460ff16610ed55760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792061646d696e2063616e20706572666f726d207468697321000000006044820152606401610854565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152600b602052604090205460ff16610f565760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792061646d696e2063616e20706572666f726d207468697321000000006044820152606401610854565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b600080610f876012600a612782565b610f9190856127d1565b9050610f9d83826127e8565b949350505050565b610fad611afc565b610fb76000612115565b565b604080516002808252606080830184529260009291906020830190803683370190505090508481600081518110610ff257610ff261265f565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106110265761102661265f565b6001600160a01b03928316602091820292909201015260115460405163d06ca61f60e01b815291169063d06ca61f906110659086908590600401612841565b600060405180830381865afa158015611082573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610da4919081019061285a565b606060066000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015611134576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600180820154848601526002909101549183019190915290835290920191016110df565b505050509050919050565b336000908152600b602052604090205460ff1661119e5760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792061646d696e2063616e20706572666f726d207468697321000000006044820152606401610854565b6001600160a01b03919091166000908152600b60205260409020805460ff1916911515919091179055565b336000908152600b602052604090205460ff166112285760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792061646d696e2063616e20706572666f726d207468697321000000006044820152606401610854565b600d546000908152600a602052604090205460ff161561128a5760405162461bcd60e51b815260206004820152601760248201527f416c7265616479207472616e73666572656420706f74210000000000000000006044820152606401610854565b6112948282610740565b6112e05760405162461bcd60e51b815260206004820152600d60248201527f57726f6e6720706c6179657221000000000000000000000000000000000000006044820152606401610854565b6000828152600a60209081526040808320805460ff19166001179055600e54600492839052928190205490517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b039093169263a9059cbb926113639286929091016001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015611382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a6919061288f565b505050565b336000908152600b602052604090205460ff1661140a5760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792061646d696e2063616e20706572666f726d207468697321000000006044820152606401610854565b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b6000610a0f82612165565b60008181526006602090815260408083206001600160a01b0386168452600c8352818420600d5485529092528220548154811061147f5761147f61265f565b906000526020600020906003020160010154905092915050565b604051636eb1769f60e11b815233600482015230602482015286906001600160a01b038a169063dd62ed3e90604401602060405180830381865afa1580156114e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150991906128ac565b101580156115855750604051636eb1769f60e11b815233600482015230602482015285906001600160a01b0389169063dd62ed3e90604401602060405180830381865afa15801561155e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158291906128ac565b10155b6115d15760405162461bcd60e51b815260206004820152600f60248201527f417070726f76616c206661696c656400000000000000000000000000000000006044820152606401610854565b6040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b038916906323b872dd906064016020604051808303816000875af1158015611624573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611648919061288f565b506040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b038816906323b872dd906064016020604051808303816000875af115801561169c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c0919061288f565b50600f5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018890529089169063095ea7b3906044016020604051808303816000875af1158015611714573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611738919061288f565b50600f5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018790529088169063095ea7b3906044016020604051808303816000875af115801561178c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b0919061288f565b506011546040517fe8e337000000000000000000000000000000000000000000000000000000000081526001600160a01b038a81166004830152898116602483015260448201899052606482018890526084820187905260a4820186905284811660c483015260e482018490529091169063e8e3370090610104016060604051808303816000875af115801561184a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186e91906128c5565b5050505050505050505050565b336000908152600b602052604090205460ff166118da5760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792061646d696e2063616e20706572666f726d207468697321000000006044820152606401610854565b600d5460009081526005602052604090205460ff1661193b5760405162461bcd60e51b815260206004820152601560248201527f5468697320726166666c6520697320656e6465642100000000000000000000006044820152606401610854565b601060009054906101000a90046001600160a01b03166001600160a01b031663e0c862896040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b491906128ac565b600d805460009081526008602090815260408083209490945591548152600590915220805460ff19169055565b6119e9611afc565b6001600160a01b038116611a655760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610854565b611a6e81612115565b50565b336000908152600b602052604090205460ff16611ad05760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792061646d696e2063616e20706572666f726d207468697321000000006044820152606401610854565b601180546001600160a01b039092166001600160a01b03199283168117909155600f8054909216179055565b6000546001600160a01b03163314610fb75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610854565b6001600160a01b038316600090815260016020526040902054839060ff16611bc05760405162461bcd60e51b815260206004820152601760248201527f546f6b656e206973206e6f7420737570706f72746564210000000000000000006044820152606401610854565b6040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b038516906323b872dd906064016020604051808303816000875af1158015611c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c37919061288f565b506040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015283906001600160a01b038616906370a0823190602401602060405180830381865afa158015611c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbb91906128ac565b10158015611cc95750600083115b611d155760405162461bcd60e51b815260206004820152601360248201527f4e6f7420656e6f7567682062616c616e636521000000000000000000000000006044820152606401610854565b6000611d2085612165565b90506000611d2e85836127d1565b60408051600280825260608201835292935060009290916020830190803683370190505090508681600081518110611d6857611d6861265f565b6001600160a01b039283166020918202929092010152600e54825191169082906001908110611d9957611d9961265f565b6001600160a01b039283166020918202929092010152600f5460405163095ea7b360e01b81529082166004820152602481018890529088169063095ea7b3906044016020604051808303816000875af1158015611dfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1e919061288f565b5060115460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f90611e52908a908690600401612841565b600060405180830381865afa158015611e6f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e97919081019061285a565b60115481519192506000916001600160a01b03909116906338ed1739908a908590611ec4906001906128f3565b81518110611ed457611ed461265f565b6020026020010151863042610258611eec919061268b565b6040518663ffffffff1660e01b8152600401611f0c959493929190612906565b6000604051808303816000875af1158015611f2b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f53919081019061285a565b60018351611f6191906128f3565b81518110611f7157611f7161265f565b60200260200101519050611fa8604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b3381600001906001600160a01b031690816001600160a01b0316815250508481602001818152505060036000898152602001908152602001600020548160400181815250506006600089815260200190815260200160002080549050600c6000336001600160a01b03166001600160a01b0316815260200190815260200160002060008a8152602001908152602001600020819055506006600089815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155505084600360008a815260200190815260200160002060008282546120e1919061268b565b90915550506000888152600460205260408120805484929061210490849061268b565b909155505050505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116600090815260016020526040812054829060ff166121cf5760405162461bcd60e51b815260206004820152601760248201527f546f6b656e206973206e6f7420737570706f72746564210000000000000000006044820152606401610854565b6001600160a01b038084166000908152600260205260408082205481517ffeaf968c0000000000000000000000000000000000000000000000000000000081529151931692839163feaf968c9160048083019260a09291908290030181865afa158015612240573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122649190612961565b509198975050505050505050565b6000806040838503121561228557600080fd5b50508035926020909101359150565b6001600160a01b0381168114611a6e57600080fd5b600080604083850312156122bc57600080fd5b8235915060208301356122ce81612294565b809150509250929050565b8015158114611a6e57600080fd5b6000806000606084860312156122fc57600080fd5b833561230781612294565b9250602084013561231781612294565b91506040840135612327816122d9565b809150509250925092565b60006020828403121561234457600080fd5b813561234f81612294565b9392505050565b6000806040838503121561236957600080fd5b823561237481612294565b915060208301356122ce81612294565b6000806040838503121561239757600080fd5b82356123a281612294565b946020939093013593505050565b6000602082840312156123c257600080fd5b5035919050565b6000806000606084860312156123de57600080fd5b83356123e981612294565b925060208401356123f981612294565b929592945050506040919091013590565b6020808252825182820181905260009190848201906040850190845b8181101561244257835183529284019291840191600101612426565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b828110156124a357815180516001600160a01b031685528681015187860152850151858501526060909301929085019060010161246b565b5091979650505050505050565b600080604083850312156124c357600080fd5b82356124ce81612294565b915060208301356122ce816122d9565b600080600080600080600080610100898b0312156124fb57600080fd5b883561250681612294565b9750602089013561251681612294565b965060408901359550606089013594506080890135935060a0890135925060c089013561254281612294565b8092505060e089013590509295985092959890939650565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261258157600080fd5b8151602067ffffffffffffffff8083111561259e5761259e61255a565b8260051b604051601f19603f830116810181811084821117156125c3576125c361255a565b60405293845260208187018101949081019250878511156125e357600080fd5b6020870191505b84821015612603578151835291830191908301906125ea565b979650505050505050565b6000806040838503121561262157600080fd5b825161262c816122d9565b602084015190925067ffffffffffffffff81111561264957600080fd5b61265585828601612570565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610a0f57610a0f612675565b600181815b808511156126d95781600019048211156126bf576126bf612675565b808516156126cc57918102915b93841c93908002906126a3565b509250929050565b6000826126f057506001610a0f565b816126fd57506000610a0f565b8160018114612713576002811461271d57612739565b6001915050610a0f565b60ff84111561272e5761272e612675565b50506001821b610a0f565b5060208310610133831016604e8410600b841016171561275c575081810a610a0f565b612766838361269e565b806000190482111561277a5761277a612675565b029392505050565b600061234f83836126e1565b634e487b7160e01b600052601260045260246000fd5b6000826127b3576127b361278e565b500690565b6000600182016127ca576127ca612675565b5060010190565b8082028115828204841417610a0f57610a0f612675565b6000826127f7576127f761278e565b500490565b60008151808452602080850194506020840160005b838110156128365781516001600160a01b031687529582019590820190600101612811565b509495945050505050565b828152604060208201526000610f9d60408301846127fc565b60006020828403121561286c57600080fd5b815167ffffffffffffffff81111561288357600080fd5b610f9d84828501612570565b6000602082840312156128a157600080fd5b815161234f816122d9565b6000602082840312156128be57600080fd5b5051919050565b6000806000606084860312156128da57600080fd5b8351925060208401519150604084015190509250925092565b81810381811115610a0f57610a0f612675565b85815284602082015260a06040820152600061292560a08301866127fc565b6001600160a01b0394909416606083015250608001529392505050565b805169ffffffffffffffffffff8116811461295c57600080fd5b919050565b600080600080600060a0868803121561297957600080fd5b61298286612942565b94506020860151935060408601519250606086015191506129a560808701612942565b9050929550929590935056fea2646970667358221220cc84bb64413f4e9b90c7e6fbaf0c08743b760c1e496aae8a2dce68871182572b64736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2275,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1019,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "allowedTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1023,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "currencyOracle",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1027,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "rafflePot",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1031,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "rafflePotInWeth",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1035,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "isRaffleInProcess",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 1041,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "rafflePlayers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_array(t_struct(Player)1092_storage)dyn_storage)"
      },
      {
        "astId": 1045,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "isPlayed",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1049,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "requestIdForRaffle",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1053,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "raffleWinner",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1057,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "isPotTransfered",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 1061,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "isAdmin",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1067,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "userPosInRaffle",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1069,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "raffleId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1077,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "_weth",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 1079,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "uniswapRouterAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 1082,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "randomNumberConsumer",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(VRFv2Consumer)2221"
      },
      {
        "astId": 1085,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "_router",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IUniswapV2Router02)2546"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Player)1092_storage)dyn_storage": {
        "base": "t_struct(Player)1092_storage",
        "encoding": "dynamic_array",
        "label": "struct Raffle.Player[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IUniswapV2Router02)2546": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_contract(VRFv2Consumer)2221": {
        "encoding": "inplace",
        "label": "contract VRFv2Consumer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Player)1092_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Raffle.Player[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Player)1092_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Player)1092_storage": {
        "encoding": "inplace",
        "label": "struct Raffle.Player",
        "members": [
          {
            "astId": 1087,
            "contract": "contracts/Raffle.sol:Raffle",
            "label": "playerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1089,
            "contract": "contracts/Raffle.sol:Raffle",
            "label": "playerBet",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1091,
            "contract": "contracts/Raffle.sol:Raffle",
            "label": "prevDepSum",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}